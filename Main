import app
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

import tensorflow as tf
from tensorflow	import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras import layers

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import Normalizer
from sklearn.metrics import r2_score
from tensorflow.keras.layers import InputLayer
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam

#Opening the file
df = pd.read_csv("https://github.com/Alirezakhz94/DL1/blob/main/admissions_data.csv")

#Preprocess
labels = df.iloc [:,-1]
features = df.iloc [:, 1:8]

#Data spliting
features_training, features_test, label_training, label_test = train_test_split(features, labels, test_size = 0.25, random_state=20)

#Scaling
sc = StandardScaler()
features_training_scaled = sc.fit_transform (features_training)
features_test_scaled = sc.transform(features_test)

#Model architecture
model = Sequential ()
input = InputLayer (input_shape = (features.shape[1],))
model.add(input)
model.add(Dense(24, activation="relu"))
model.add(Dense(1))
opt = Adam(learning_rate = 0.01)
model.compile (loss = 'mse', metrics = ['mae'], optimizer = opt)
model.fit(features_training_scaled,label_training,epochs = 50, batch_size = 1, verbose = 1)
res_mse, res_mae = model.evaluate(features_test_scaled, label_test, verbose = 0)
print(res_mse, res_mae)

fig = plt.figure()
ax1 = fig.add_subplot(2, 1, 1)
ax1.plot(['mae'])
ax1.plot(['res_mae'])
ax1.set_title('model mae')
ax1.set_ylabel('MAE')
ax1.set_xlabel('epoch')
ax1.legend(['train', 'validation'], loc='upper left')
 
  # Plot loss and val_loss over each epoch
ax2 = fig.add_subplot(2, 1, 2)
ax2.plot(['loss'])
ax2.plot(['res_loss'])
ax2.set_title('model loss')
ax2.set_ylabel('loss')
ax2.set_xlabel('epoch')
ax2.legend(['train', 'validation'], loc='upper left')
 
# used to keep plots from overlapping each other  
fig.tight_layout()
plt.show()

predicted_values = model.predict(features_test) 
print(r2_score(labels_test,predicted_values)) 
